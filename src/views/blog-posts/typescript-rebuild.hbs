<main>
  <section>
    <h2>IDE: TypeScript Rebuild</h2>
    <img src="/assets/images/blog/typescript-rebuild-blog-post-thumbnail.png" alt="Screenshot of IDE made with TypeScript"/>
    <div class="date-time">
      <span class="date">05/03/2022</span>
      <span class="time">15:30</span>
    </div>
    <p>
      Around the time when I'd reached the difficult part of the syntax highlighter for
      my IDE (as discussed in my <a href="/blog-posts/syntax-highlighter">previous blog post</a>),
      I got curious about TypeScript. I noticed that many Electron apps use it instead of 
      plain old JS. So, I watched a few YouTube videos and decided to rebuild the IDE with it.
    </p>
    <p>
      I haven't got as far as reimplementing and improving syntax highlighting yet, but I'm on track!
      At the moment, the main obstacle is finding the time - I've been working, studying, and making
      lots of music...
    </p>
    <p>
      I've also managed to structure the project a bit more 'professionally', and I'm much happier
      with it!
    </p>
    <h3>Snippets</h3>
    <figure>
      <figcaption>App.ts</figcaption>
      <pre>
        <code class="language-javascript">
import { applyStyles } from './helpers';
import Main from './components/Main';
import StatusBar from './components/StatusBar';

const styles = {
  display: 'flex',
  flexDirection: 'column',
  boxSizing: 'border-box',
  padding: 0,
  maxWidth: '100%',
  height: '100vh',
  maxHeight: '100vh',
  margin: 0,
  overflow: 'hidden'
};

export default class App {
  private _main: Main;
  private _statusbar: StatusBar;

  constructor() {
    this.initUI();
    this.reopenFilesFromLastUse();
  }

  private initUI() {
    const body = document.querySelector('body');

    this._main = new Main();
    this._statusbar = new StatusBar();

    body.appendChild(this._main);
    body.appendChild(this._statusbar);

    applyStyles(body, styles);

    document.addEventListener('new-file-requested', this.onNewFileRequested.bind(this));
    document.addEventListener('open-file-requested', this.onOpenFileRequested.bind(this))
  }

  onNewFileRequested() {
    this._main.newFile();
  }

  onOpenFileRequested() {
    const filename = window.api.dialogs.showOpenFileDialog();

    if (!filename) {
      return;
    }

    this._main.openFile(filename);
  }

  onWindowCloseRequested() {
    const proceed = this._main.saveUnsavedFiles();
    if (proceed) {
      window.close();
    }
  }

  private reopenFilesFromLastUse() {
    const filenames = window.api.config.openFiles.all();
    filenames.forEach(filename => {
      this._main.openFile(filename);
    });
  }
}
        </code>
      </pre>
    </figure>
  </section>
</main>
<script>hljs.highlightAll();</script>